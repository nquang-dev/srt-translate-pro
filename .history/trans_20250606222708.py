import streamlit as st
import pysrt
from googletrans import Translator
import io
import os
import time
import re
from datetime import datetime

def split_text_into_chunks(text, max_length=4000):
    """Chia text th√†nh c√°c chunk nh·ªè h∆°n max_length"""
    if len(text) <= max_length:
        return [text]
    
    chunks = []
    sentences = re.split(r'(?<=[.!?])\s+', text)
    current_chunk = ""
    
    for sentence in sentences:
        if len(current_chunk + sentence) <= max_length:
            current_chunk += sentence + " "
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = sentence + " "
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

def translate_text_with_retry(translator, text, target_language='vi', max_retries=3):
    """D·ªãch text v·ªõi retry mechanism"""
    for attempt in range(max_retries):
        try:
            result = translator.translate(text, dest=target_language)
            return result.text
        except Exception as e:
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 2
                st.warning(f"L·ªói d·ªãch (th·ª≠ l·∫°i sau {wait_time}s): {str(e)}")
                time.sleep(wait_time)
            else:
                st.error(f"Kh√¥ng th·ªÉ d·ªãch sau {max_retries} l·∫ßn th·ª≠: {str(e)}")
                return text

def srt_to_string(subs):
    """Chuy·ªÉn ƒë·ªïi pysrt SubRipFile th√†nh string ƒë√∫ng ƒë·ªãnh d·∫°ng SRT"""
    result = []
    for i, sub in enumerate(subs, 1):
        # Format: s·ªë th·ª© t·ª±
        result.append(str(i))
        
        # Format: th·ªùi gian
        start_time = sub.start.to_time()
        end_time = sub.end.to_time()
        
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian sang ƒë·ªãnh d·∫°ng SRT (HH:MM:SS,mmm)
        start_str = f"{start_time.hour:02d}:{start_time.minute:02d}:{start_time.second:02d},{start_time.microsecond//1000:03d}"
        end_str = f"{end_time.hour:02d}:{end_time.minute:02d}:{end_time.second:02d},{end_time.microsecond//1000:03d}"
        
        result.append(f"{start_str} --> {end_str}")
        
        # N·ªôi dung ph·ª• ƒë·ªÅ
        result.append(sub.text)
        
        # D√≤ng tr·ªëng gi·ªØa c√°c ph·ª• ƒë·ªÅ
        result.append("")
    
    return "\n".join(result)

def translate_srt_content_advanced(srt_content, target_language='vi'):
    """D·ªãch n·ªôi dung file SRT v·ªõi x·ª≠ l√Ω file d√†i"""
    translator = Translator()
    
    # Parse SRT content
    subs = pysrt.from_string(srt_content)
    total_subs = len(subs)
    
    st.info(f"üîÑ B·∫Øt ƒë·∫ßu d·ªãch {total_subs} d√≤ng ph·ª• ƒë·ªÅ...")
    
    # T·∫°o progress bar
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # D·ªãch t·ª´ng d√≤ng
    batch_size = 10
    
    for i, sub in enumerate(subs):
        try:
            # C·∫≠p nh·∫≠t status
            status_text.text(f"ƒêang d·ªãch d√≤ng {i+1}/{total_subs}: {sub.text[:50]}...")
            
            # D·ªãch text n·∫øu c√≥ n·ªôi dung
            if sub.text.strip():
                translated_text = translate_text_with_retry(translator, sub.text, target_language)
                sub.text = translated_text
            
            # C·∫≠p nh·∫≠t progress
            progress_bar.progress((i + 1) / total_subs)
            
            # Ngh·ªâ sau m·ªói batch
            if (i + 1) % batch_size == 0:
                time.sleep(1)
                
        except Exception as e:
            st.warning(f"L·ªói d√≤ng {i+1}: {str(e)}")
            continue
    
    status_text.text("‚úÖ Ho√†n th√†nh d·ªãch!")
    
    # Chuy·ªÉn ƒë·ªïi v·ªÅ string SRT ƒë√∫ng ƒë·ªãnh d·∫°ng
    return srt_to_string(subs)

def translate_srt_content_batch(srt_content, target_language='vi'):
    """D·ªãch n·ªôi dung file SRT theo batch"""
    translator = Translator()
    
    # Parse SRT content
    subs = pysrt.from_string(srt_content)
    total_subs = len(subs)
    
    st.info(f"üöÄ D·ªãch nhanh {total_subs} d√≤ng ph·ª• ƒë·ªÅ (batch mode)...")
    
    # G·ªôp text ƒë·ªÉ d·ªãch batch
    texts_to_translate = []
    text_mapping = {}
    
    for i, sub in enumerate(subs):
        if sub.text.strip():
            texts_to_translate.append(sub.text)
            text_mapping[sub.text] = i
    
    # Chia th√†nh chunks
    batch_size = 20
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    translated_texts = {}
    
    for i in range(0, len(texts_to_translate), batch_size):
        batch = texts_to_translate[i:i+batch_size]
        batch_text = "\n###SEPARATOR###\n".join(batch)
        
        try:
            status_text.text(f"ƒêang d·ªãch batch {i//batch_size + 1}/{(len(texts_to_translate)-1)//batch_size + 1}...")
            
            if len(batch_text) > 4000:
                # D·ªãch t·ª´ng c√°i n·∫øu qu√° d√†i
                for text in batch:
                    translated = translate_text_with_retry(translator, text, target_language)
                    translated_texts[text] = translated
                    time.sleep(0.5)
            else:
                # D·ªãch c·∫£ batch
                translated_batch = translate_text_with_retry(translator, batch_text, target_language)
                translated_list = translated_batch.split("###SEPARATOR###")
                
                for original, translated in zip(batch, translated_list):
                    translated_texts[original] = translated.strip()
            
            progress_bar.progress((i + batch_size) / len(texts_to_translate))
            time.sleep(1)
            
        except Exception as e:
            st.warning(f"L·ªói batch {i//batch_size + 1}: {str(e)}")
            # Fallback: d·ªãch t·ª´ng c√°i
            for text in batch:
                translated = translate_text_with_retry(translator, text, target_language)
                translated_texts[text] = translated
                time.sleep(0.5)
    
    # √Åp d·ª•ng b·∫£n d·ªãch v√†o subs
    for sub in subs:
        if sub.text.strip() and sub.text in translated_texts:
            sub.text = translated_texts[sub.text]
    
    status_text.text("‚úÖ Ho√†n th√†nh d·ªãch batch!")
    
    # Chuy·ªÉn ƒë·ªïi v·ªÅ string SRT ƒë√∫ng ƒë·ªãnh d·∫°ng
    return srt_to_string(subs)

def display_srt_preview(srt_content):
    """Hi·ªÉn th·ªã preview c·ªßa file SRT"""
    try:
        # Parse t·ª´ string SRT
        subs = pysrt.from_string(srt_content)
        
        st.subheader("üì∫ Xem tr∆∞·ªõc b·∫£n d·ªãch:")
        
        # Th·ªëng k√™
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("T·ªïng s·ªë d√≤ng", len(subs))
        with col2:
            if subs:
                total_duration = subs[-1].end - subs[0].start
                st.metric("Th·ªùi l∆∞·ª£ng", f"{total_duration}")
            else:
                st.metric("Th·ªùi l∆∞·ª£ng", "N/A")
        with col3:
            total_chars = sum(len(sub.text) for sub in subs)
            st.metric("T·ªïng k√Ω t·ª±", f"{total_chars:,}")
        
        # Preview v·ªõi search
        search_term = st.text_input("üîç T√¨m ki·∫øm trong ph·ª• ƒë·ªÅ:")
        
        # Filter subs based on search
        if search_term:
            filtered_subs = [sub for sub in subs if search_term.lower() in sub.text.lower()]
            st.info(f"T√¨m th·∫•y {len(filtered_subs)} k·∫øt qu·∫£")
            display_subs = filtered_subs
        else:
            display_subs = subs[:30]  # Hi·ªÉn th·ªã 30 d√≤ng ƒë·∫ßu
            if len(subs) > 30:
                st.info(f"Hi·ªÉn th·ªã 30/{len(subs)} d√≤ng ƒë·∫ßu ti√™n. S·ª≠ d·ª•ng t√¨m ki·∫øm ƒë·ªÉ xem c√°c d√≤ng kh√°c.")
        
        # Display subtitles
        for i, sub in enumerate(display_subs):
            original_index = subs.index(sub) + 1 if sub in subs else i + 1
            
            with st.expander(f"D√≤ng {original_index}: {sub.start} --> {sub.end}"):
                st.write(sub.text)
                if search_term and search_term.lower() in sub.text.lower():
                    st.markdown(f"**üîç T·ª´ kh√≥a t√¨m th·∫•y:** {search_term}")
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi hi·ªÉn th·ªã preview: {str(e)}")
        st.write("**Raw content (first 1000 chars):**")
        st.text(srt_content[:1000])

def main():
    st.set_page_config(
        page_title="SRT Translator Pro",
        page_icon="üåê",
        layout="wide"
    )
    
    st.title("üåê SRT Translator Pro - H·ªó tr·ª£ file d√†i")
    st.markdown("---")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Ch·ªçn ph∆∞∆°ng ph√°p d·ªãch
        translation_method = st.radio(
            "Ph∆∞∆°ng ph√°p d·ªãch:",
            ["An to√†n (t·ª´ng d√≤ng)", "Nhanh (batch)"],
            help="An to√†n: ch·∫≠m h∆°n nh∆∞ng √≠t l·ªói. Nhanh: nhanh h∆°n nh∆∞ng c√≥ th·ªÉ b·ªã l·ªói v·ªõi file r·∫•t d√†i"
        )
        
        st.markdown("---")
        st.header("‚ÑπÔ∏è Th√¥ng tin")
        st.write("‚Ä¢ H·ªó tr·ª£ file SRT **kh√¥ng gi·ªõi h·∫°n ƒë·ªô d√†i**")
        st.write("‚Ä¢ X·ª≠ l√Ω th√¥ng minh cho file > 5000 k√Ω t·ª±")
        st.write("‚Ä¢ Retry t·ª± ƒë·ªông khi l·ªói")
        st.write("‚Ä¢ Progress tracking chi ti·∫øt")
        
        st.markdown("---")
        st.write("**H·ªó tr·ª£:** .srt files")
        st.write("**D·ªãch t·ª´:** Auto-detect")
        st.write("**D·ªãch sang:** Ti·∫øng Vi·ªát")
    
    # File uploader
    uploaded_file = st.file_uploader(
        "üìÅ Ch·ªçn file SRT c·∫ßn d·ªãch:",
        type=['srt'],
        help="H·ªó tr·ª£ file SRT kh√¥ng gi·ªõi h·∫°n k√≠ch th∆∞·ªõc"
    )
    
    if uploaded_file is not None:
        try:
            # ƒê·ªçc file v·ªõi encoding detection
            try:
                srt_content = uploaded_file.read().decode('utf-8')
            except UnicodeDecodeError:
                try:
                    uploaded_file.seek(0)
                    srt_content = uploaded_file.read().decode('utf-8-sig')
                except:
                    uploaded_file.seek(0)
                    srt_content = uploaded_file.read().decode('latin-1')
            
            # Th√¥ng tin file
            file_size = len(srt_content)
            subs = pysrt.from_string(srt_content)
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
            st.success(f"‚úÖ ƒê√£ t·∫£i file: **{uploaded_file.name}**")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("S·ªë d√≤ng ph·ª• ƒë·ªÅ", len(subs))
            with col2:
                st.metric("K√≠ch th∆∞·ªõc file", f"{file_size:,} k√Ω t·ª±")
            with col3:
                if subs:
                    duration = subs[-1].end - subs[0].start
                    st.metric("Th·ªùi l∆∞·ª£ng", str(duration))
                else:
                    st.metric("Th·ªùi l∆∞·ª£ng", "N/A")
            with col4:
                avg_chars = file_size // len(subs) if subs else 0
                st.metric("TB k√Ω t·ª±/d√≤ng", avg_chars)
            
            # C·∫£nh b√°o cho file d√†i
            if file_size > 10000:
                st.warning("‚ö†Ô∏è File kh√° d√†i. Qu√° tr√¨nh d·ªãch c√≥ th·ªÉ m·∫•t v√†i ph√∫t. H√£y ki√™n nh·∫´n!")
            
            # N√∫t d·ªãch
            if st.button("üöÄ B·∫Øt ƒë·∫ßu d·ªãch", type="primary"):
                start_time = time.time()
                
                with st.spinner("üîÑ ƒêang d·ªãch file... Vui l√≤ng kh√¥ng t·∫Øt trang..."):
                    try:
                        # Ch·ªçn ph∆∞∆°ng ph√°p d·ªãch
                        if translation_method == "An to√†n (t·ª´ng d√≤ng)":
                            translated_content = translate_srt_content_advanced(srt_content)
                        else:
                            translated_content = translate_srt_content_batch(srt_content)
                        
                        # L∆∞u k·∫øt qu·∫£
                        st.session_state.translated_content = translated_content
                        st.session_state.original_filename = uploaded_file.name
                        
                        end_time = time.time()
                        duration = end_time - start_time
                        
                        st.success(f"üéâ D·ªãch ho√†n th√†nh trong {duration:.1f} gi√¢y!")
                        
                        # Hi·ªÉn th·ªã sample ƒë·ªÉ ki·ªÉm tra
                        st.subheader("üìã M·∫´u k·∫øt qu·∫£:")
                        sample_lines = translated_content.split('\n')[:10]
                        st.text('\n'.join(sample_lines))
                        
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi d·ªãch: {str(e)}")
                        st.info("üí° Th·ª≠ chuy·ªÉn sang ph∆∞∆°ng ph√°p 'An to√†n' n·∫øu g·∫∑p l·ªói")
            
            # Hi·ªÉn th·ªã t√πy ch·ªçn sau khi d·ªãch
            if 'translated_content' in st.session_state and st.session_state.get('original_filename') == uploaded_file.name:
                st.markdown("---")
                st.subheader("üéØ L·ª±a ch·ªçn c·ªßa b·∫°n:")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üëÅÔ∏è Xem tr∆∞·ªõc online", use_container_width=True):
                        st.session_state.show_preview = True
                
                with col2:
                    # T·∫°o t√™n file
                    original_name = st.session_state.original_filename
                    name_without_ext = os.path.splitext(original_name)[0]
                    new_filename = f"{name_without_ext}_vietnamese.srt"
                    
                    st.download_button(
                        label="üíæ T·∫£i xu·ªëng file ƒë√£ d·ªãch",
                        data=st.session_state.translated_content,
                        file_name=new_filename,
                        mime="text/plain",
                        use_container_width=True
                    )
                
                # Hi·ªÉn th·ªã preview n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                if st.session_state.get('show_preview', False):
                    display_srt_preview(st.session_state.translated_content)
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω file: {str(e)}")
            st.write("**Debug info:**")
            st.write(f"File name: {uploaded_file.name}")
            st.write(f"File size: {uploaded_file.size} bytes")
    
    else:
        st.info("üëÜ Vui l√≤ng ch·ªçn file SRT ƒë·ªÉ b·∫Øt ƒë·∫ßu")
        
        # Reset session state khi kh√¥ng c√≥ file
        if 'translated_content' in st.session_state:
            del st.session_state.translated_content
        if 'show_preview' in st.session_state:
            del st.session_state.show_preview
        
        # H∆∞·ªõng d·∫´n
        with st.expander("üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
            st.markdown("""
            ### üîß C√°ch s·ª≠ d·ª•ng:
            
            1. **Upload file SRT** ti·∫øng Anh
            2. **Ch·ªçn ph∆∞∆°ng ph√°p d·ªãch** ph√π h·ª£p
            3. **Nh·∫•n "B·∫Øt ƒë·∫ßu d·ªãch"** v√† ch·ªù ƒë·ª£i
            4. **Xem tr∆∞·ªõc** ho·∫∑c **t·∫£i xu·ªëng** k·∫øt qu·∫£
            
            ### ‚öôÔ∏è Ph∆∞∆°ng ph√°p d·ªãch:
            - **An to√†n:** D·ªãch t·ª´ng d√≤ng, ch·∫≠m nh∆∞ng √≠t l·ªói
            - **Nhanh:** D·ªãch theo batch, nhanh h∆°n
            
            ### üí° L∆∞u √Ω:
            - File c√†ng d√†i c√†ng m·∫•t nhi·ªÅu th·ªùi gian
            - Kh√¥ng t·∫Øt trang trong khi d·ªãch
            - Ki·ªÉm tra k·∫øt qu·∫£ tr∆∞·ªõc khi s·ª≠ d·ª•ng
            """)

if __name__ == "__main__":
    main()
